// <auto-generated />
using System;
using BropertyBrosApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BropertyBrosApi2._0.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250423125231_letsnotignoretheproblem")]
    partial class letsnotignoretheproblem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BropertyBrosApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Lägenhet"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Villa"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Radhus"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Bostadsrätt"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Hyresrätt"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Fritidshus"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Stuga"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Kollektivboende"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Studentboende"
                        });
                });

            modelBuilder.Entity("BropertyBrosApi.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Stockholm"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Göteborg"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Malmö"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Uppsala"
                        },
                        new
                        {
                            Id = 5,
                            CityName = "Luleå"
                        },
                        new
                        {
                            Id = 6,
                            CityName = "Örebro"
                        });
                });

            modelBuilder.Entity("BropertyBrosApi.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AncillaryAreaKvm")
                        .HasColumnType("int");

                    b.Property<int>("BuildYear")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LandAreaKvm")
                        .HasColumnType("int");

                    b.Property<int>("LivingAreaKvm")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyFee")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RealtorId")
                        .HasColumnType("int");

                    b.Property<int>("YearlyFee")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("RealtorId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Exempelgatan 12",
                            AncillaryAreaKvm = 10,
                            BuildYear = 2010,
                            CategoryId = 4,
                            CityId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fin bostadsrätt i centrala Stockholm.",
                            ImageUrls = "[\"https://coralhomes.com.au/wp-content/uploads/Grange-258Q-Harmony-Lodge-Facade-2-1190x680.jpg\"]",
                            LandAreaKvm = 0,
                            LivingAreaKvm = 85,
                            MonthlyFee = 3500,
                            NumberOfRooms = 3,
                            Price = 4500000,
                            RealtorId = 1,
                            YearlyFee = 42000
                        },
                        new
                        {
                            Id = 2,
                            Address = "Villavägen 7",
                            AncillaryAreaKvm = 30,
                            BuildYear = 1995,
                            CategoryId = 2,
                            CityId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stor villa med trädgård och garage.",
                            ImageUrls = "[\"https://www.thehousedesigners.com/images/plans/01/JBZ/bulk/4382/2428-dusk-render.webp\"]",
                            LandAreaKvm = 500,
                            LivingAreaKvm = 140,
                            MonthlyFee = 0,
                            NumberOfRooms = 5,
                            Price = 6700000,
                            RealtorId = 2,
                            YearlyFee = 12000
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sommarvägen 3",
                            AncillaryAreaKvm = 5,
                            BuildYear = 2018,
                            CategoryId = 1,
                            CityId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ljus och modern lägenhet nära havet.",
                            ImageUrls = "[\"https://images.unsplash.com/photo-1564013799919-ab600027ffc6?q=80\\u0026w=1170\\u0026auto=format\\u0026fit=crop\\u0026ixlib=rb-4.0.3\\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"]",
                            LandAreaKvm = 0,
                            LivingAreaKvm = 70,
                            MonthlyFee = 2000,
                            NumberOfRooms = 2,
                            Price = 2800000,
                            RealtorId = 3,
                            YearlyFee = 24000
                        },
                        new
                        {
                            Id = 4,
                            Address = "Stugvägen 1",
                            AncillaryAreaKvm = 15,
                            BuildYear = 1980,
                            CategoryId = 7,
                            CityId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mysig stuga i skogsmiljö.",
                            ImageUrls = "[\"https://static.schumacherhomes.com/umbraco/media/wvflutbh/image4.jpg?format=webp\",\"https://static.schumacherhomes.com/umbraco/media/ytthzjth/image3.jpg?format=webp\",\"https://static.schumacherhomes.com/umbraco/media/4r4pxnt5/image11.jpg?format=webp\"]",
                            LandAreaKvm = 1000,
                            LivingAreaKvm = 45,
                            MonthlyFee = 0,
                            NumberOfRooms = 2,
                            Price = 1600000,
                            RealtorId = 4,
                            YearlyFee = 10000
                        });
                });

            modelBuilder.Entity("BropertyBrosApi.Models.Realtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RealtorFirmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealtorFirmId");

                    b.ToTable("Realtors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "markus@bropertybros.se",
                            FirstName = "Marcus",
                            LastName = "Friberg",
                            PhoneNumber = "0705712647",
                            ProfileUrl = "https://media.licdn.com/dms/image/v2/D4D03AQEYZfjOaaV_QA/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1719018397094?e=1750896000&v=beta&t=7Tc6mYQarQ62J6tfvYWlA5wLSLsxO-x5_eIlfPkYWIw",
                            RealtorFirmId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "sanna@bropertybros.se",
                            FirstName = "Sanna",
                            LastName = "Mäklarsson",
                            PhoneNumber = "0731234567",
                            ProfileUrl = "https://images.ctfassets.net/h6goo9gw1hh6/2sNZtFAWOdP1lmQ33VwRN3/24e953b920a9cd0ff2e1d587742a2472/1-intro-photo-final.jpg?w=1200&h=992&fl=progressive&q=70&fm=jpg",
                            RealtorFirmId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "erik@maklarkompaniet.se",
                            FirstName = "Erik",
                            LastName = "Fast",
                            PhoneNumber = "0704455667",
                            ProfileUrl = "https://newprofilepic.photo-cdn.net//assets/images/article/profile.jpg?90af0c8",
                            RealtorFirmId = 2
                        },
                        new
                        {
                            Id = 4,
                            Email = "anna@fastighetsmastarna.se",
                            FirstName = "Anna",
                            LastName = "Sund",
                            PhoneNumber = "0761122334",
                            ProfileUrl = "https://media.istockphoto.com/id/1682296067/photo/happy-studio-portrait-or-professional-man-real-estate-agent-or-asian-businessman-smile-for.jpg?s=612x612&w=0&k=20&c=9zbG2-9fl741fbTWw5fNgcEEe4ll-JegrGlQQ6m54rg=",
                            RealtorFirmId = 3
                        },
                        new
                        {
                            Id = 5,
                            Email = "johan@maklarkompaniet.se",
                            FirstName = "Johan",
                            LastName = "Bostad",
                            PhoneNumber = "0723344556",
                            ProfileUrl = "https://example.com/profiles/johan.png",
                            RealtorFirmId = 2
                        });
                });

            modelBuilder.Entity("BropertyBrosApi.Models.RealtorFirm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RealtorFirms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Broperty Bros",
                            Description = "En modern mäklarfirma med fokus på teknik och AI.",
                            LogoUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR2ZjXY0_53ngWuJweTB5_n6Ogvo3_FsHh3lw&s",
                            WebsiteUrl = "https://www.bostaden.umea.se"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Mäklarkompaniet",
                            Description = "Traditionellt kunnande, moderna lösningar.",
                            LogoUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQfuELyshYBonAgRjJs86D0W7xPATcqIx48nw&s",
                            WebsiteUrl = "https://www.hudikhem.se"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Fastighetsmästarna",
                            Description = "Specialister på bostäder i hela Sverige.",
                            LogoUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSnxZygU3x6zsKO3937icA5wDGg0UbijK1CxA&s",
                            WebsiteUrl = "https://heimstaden.com/se/"
                        });
                });

            modelBuilder.Entity("BropertyBrosApi2._0.Data.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "037b162f-ce2c-4297-8e99-6bf381d6cebe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ea67d1d-b452-4e7b-92b4-d53c483c46f6",
                            Email = "admin@brosapi.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BROSAPI.COM",
                            NormalizedUserName = "ADMIN@BROSAPI.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEELG1BBPcWKdrKxGtCb1q5oM/YO5OjSOA52TiRV0I5k3LckvGTF311v7zKrjY98FPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f678042-0f5c-4dc2-8fad-9bca39414616",
                            TwoFactorEnabled = false,
                            UserName = "admin@brosapi.com"
                        },
                        new
                        {
                            Id = "db90f6a9-26e7-4b5d-9f1b-620ce7998fd1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78f9bc1c-b523-4daf-acb1-626a9e888112",
                            Email = "user@brosapi.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@BROSAPI.COM",
                            NormalizedUserName = "USER@BROSAPI.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9pGLt+MQ6siKy87TCXW4gpBbOllcDBgqJK29dTi5B/D7MpDI3CzFUxEGK31munnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bc70d68-5f0c-4796-ba07-ebf3a73bfdcf",
                            TwoFactorEnabled = false,
                            UserName = "user@brosapi.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "033e9cc7-adfa-4778-8dbd-c1f35d3007d5",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "b4567686-11f2-4baf-b915-305273cf5c19",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "037b162f-ce2c-4297-8e99-6bf381d6cebe",
                            RoleId = "b4567686-11f2-4baf-b915-305273cf5c19"
                        },
                        new
                        {
                            UserId = "db90f6a9-26e7-4b5d-9f1b-620ce7998fd1",
                            RoleId = "033e9cc7-adfa-4778-8dbd-c1f35d3007d5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BropertyBrosApi.Models.Property", b =>
                {
                    b.HasOne("BropertyBrosApi.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BropertyBrosApi.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BropertyBrosApi.Models.Realtor", "Realtor")
                        .WithMany("Properties")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("BropertyBrosApi.Models.Realtor", b =>
                {
                    b.HasOne("BropertyBrosApi.Models.RealtorFirm", "RealtorFirm")
                        .WithMany("Realtors")
                        .HasForeignKey("RealtorFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealtorFirm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BropertyBrosApi2._0.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BropertyBrosApi2._0.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BropertyBrosApi2._0.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BropertyBrosApi2._0.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BropertyBrosApi.Models.Realtor", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("BropertyBrosApi.Models.RealtorFirm", b =>
                {
                    b.Navigation("Realtors");
                });
#pragma warning restore 612, 618
        }
    }
}
